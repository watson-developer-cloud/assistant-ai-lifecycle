{
  "name": "palm2-actions",
  "type": "action",
  "valid": true,
  "status": "Available",
  "created": "2023-06-23T20:09:40.441Z",
  "updated": "2023-06-27T19:06:52.294Z",
  "language": "en",
  "skill_id": "eaf2528d-8c8d-47b9-8f60-c9fd3c5cbd8d",
  "workspace": {
    "actions": [
      {
        "steps": [
          {
            "step": "step_884",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/models/embedding-gecko-001:embedText",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "ae69c1b32eff9ff2e6ff0f2e1153b156bb7579540046314d898a6c66f6d09445",
                  "catalog_item_id": "4b5ac21e-b9a1-49d5-9af2-b4ccee9e40db"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "model_prompt"
                      },
                      "parameter": "text"
                    }
                  ]
                },
                "result_variable": "step_884_result_1"
              }
            },
            "variable": "step_884",
            "next_step": "step_109"
          },
          {
            "step": "step_109",
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_884_result_1}.body. embedding.value"
                  },
                  "skill_variable": "model_response"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_109",
            "condition": {
              "eq": [
                {
                  "variable": "step_884_result_1",
                  "variable_path": "success"
                },
                {
                  "scalar": true
                }
              ]
            }
          }
        ],
        "title": "Invoke PaLM Generate Embeddings API",
        "action": "action_23014",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_23014_intent_29148"
        },
        "variables": [
          {
            "title": "No response",
            "variable": "step_109",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_884",
            "data_type": "any"
          },
          {
            "variable": "step_884_result_1",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_45716",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "steps": [
          {
            "step": "step_306",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/models/text-bison-001:generateText",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "ae69c1b32eff9ff2e6ff0f2e1153b156bb7579540046314d898a6c66f6d09445",
                  "catalog_item_id": "4b5ac21e-b9a1-49d5-9af2-b4ccee9e40db"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "model_prompt"
                      },
                      "parameter": "prompt.text"
                    },
                    {
                      "value": {
                        "skill_variable": "temperature"
                      },
                      "parameter": "temperature"
                    }
                  ]
                },
                "result_variable": "step_306_result_1"
              }
            },
            "variable": "step_306",
            "next_step": "step_654"
          },
          {
            "step": "step_654",
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_306_result_1}.body.candidates.get(0).output"
                  },
                  "skill_variable": "model_response"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_654",
            "condition": {
              "and": [
                {
                  "eq": [
                    {
                      "variable": "step_306_result_1",
                      "variable_path": "success"
                    },
                    {
                      "scalar": true
                    }
                  ]
                },
                {
                  "expression": "${step_306_result_1}.body.candidates.size() > 0"
                }
              ]
            }
          }
        ],
        "title": "Invoke PaLM Generate Text API",
        "action": "action_38580",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_38580_intent_18682"
        },
        "variables": [
          {
            "title": "No response",
            "variable": "step_306",
            "data_type": "any"
          },
          {
            "variable": "step_306_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_654",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_6799",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "steps": [
          {
            "step": "step_135",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/models/chat-bison-001:generateMessage",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "ae69c1b32eff9ff2e6ff0f2e1153b156bb7579540046314d898a6c66f6d09445",
                  "catalog_item_id": "4b5ac21e-b9a1-49d5-9af2-b4ccee9e40db"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "expression": "[{\"content\": ${model_prompt}}]"
                      },
                      "parameter": "prompt.messages"
                    },
                    {
                      "value": {
                        "skill_variable": "temperature"
                      },
                      "parameter": "temperature"
                    }
                  ]
                },
                "result_variable": "step_135_result_1"
              }
            },
            "variable": "step_135",
            "next_step": "step_748"
          },
          {
            "step": "step_748",
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_135_result_1}.body.candidates.get(0).content"
                  },
                  "skill_variable": "model_response"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_748",
            "condition": {
              "eq": [
                {
                  "variable": "step_135_result_1",
                  "variable_path": "success"
                },
                {
                  "scalar": true
                }
              ]
            }
          }
        ],
        "title": "Invoke PaLM Generate message API",
        "action": "action_45716",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_45716_intent_34507"
        },
        "variables": [
          {
            "title": "No response",
            "variable": "step_135",
            "data_type": "any"
          },
          {
            "variable": "step_135_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_748",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_38580",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "steps": [
          {
            "step": "step_646",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Which model do you want to use?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                },
                {
                  "options": [
                    {
                      "label": "text-bison-001",
                      "value": {
                        "input": {
                          "text": "text-bison-001"
                        }
                      }
                    },
                    {
                      "label": "chat-bison-001",
                      "value": {
                        "input": {
                          "text": "chat-bison-001"
                        }
                      }
                    },
                    {
                      "label": "embedding-gecko-001",
                      "value": {
                        "input": {
                          "text": "embedding-gecko-001"
                        }
                      }
                    }
                  ],
                  "response_type": "option",
                  "repeat_on_reprompt": true
                }
              ]
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text": "I didn't catch that. Select a valid option:"
                        }
                      ],
                      "response_type": "text"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "entity_49211",
              "max_tries": 3,
              "allow_topic_switch": false,
              "response_collection_behavior": "optionally_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_646",
            "next_step": "step_115"
          },
          {
            "step": "step_115",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "What prompt do you want to use?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "question": {
              "free_text": true,
              "response_collection_behavior": "always_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_115",
            "next_step": "step_761"
          },
          {
            "step": "step_761",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Would you like to set a [temperature](https://developers.generativeai.google/guide/concepts#model_parameters) model parameter?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                },
                {
                  "options": [
                    {
                      "label": "Yes",
                      "value": {
                        "input": {
                          "text": "Yes"
                        }
                      }
                    },
                    {
                      "label": "No",
                      "value": {
                        "input": {
                          "text": "No"
                        }
                      }
                    }
                  ],
                  "response_type": "option",
                  "repeat_on_reprompt": true
                }
              ]
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text": "I'm sorry, I did not catch that, please restate your response."
                        }
                      ],
                      "response_type": "text"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "sys-yes-no",
              "max_tries": 3,
              "response_collection_behavior": "always_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_761",
            "condition": {
              "or": [
                {
                  "eq": [
                    {
                      "variable": "step_646"
                    },
                    {
                      "value": "text-bison-001",
                      "from_entity": "entity_49211"
                    }
                  ]
                },
                {
                  "eq": [
                    {
                      "variable": "step_646"
                    },
                    {
                      "value": "chat-bison-001",
                      "from_entity": "entity_49211"
                    }
                  ]
                }
              ]
            },
            "next_step": "step_994"
          },
          {
            "step": "step_994",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please enter a number between 0 to 1"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": []
            },
            "handlers": [
              {
                "type": "input_validation",
                "title": "input_validation_handler_1",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text": "I didn't catch that. Enter a number."
                        }
                      ],
                      "response_type": "text"
                    }
                  ]
                },
                "handler": "input_validation_handler_1",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_handler",
                "input_constraints": [
                  {
                    "name": "minimum",
                    "value": {
                      "scalar": 0
                    }
                  },
                  {
                    "name": "maximum",
                    "value": {
                      "scalar": 1
                    }
                  }
                ]
              },
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text": "I didn't catch that. Enter a number."
                        }
                      ],
                      "response_type": "text"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "sys-number",
              "max_tries": 3
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_994",
            "condition": {
              "eq": [
                {
                  "variable": "step_761"
                },
                {
                  "scalar": "yes"
                }
              ]
            },
            "next_step": "step_462"
          },
          {
            "step": "step_462",
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_994"
                  },
                  "skill_variable": "temperature"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_462",
            "next_step": "step_639"
          },
          {
            "step": "step_639",
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_639",
            "condition": {
              "eq": [
                {
                  "variable": "step_761"
                },
                {
                  "scalar": "no"
                }
              ]
            },
            "next_step": "step_110"
          },
          {
            "step": "step_110",
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_646"
                  },
                  "skill_variable": "model"
                },
                {
                  "value": {
                    "variable": "step_115"
                  },
                  "skill_variable": "model_prompt"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_110",
            "next_step": "step_991"
          },
          {
            "step": "step_991",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": "action_38580",
                "parameters": null,
                "result_variable": "step_991_result_1"
              }
            },
            "variable": "step_991",
            "condition": {
              "eq": [
                {
                  "variable": "step_646"
                },
                {
                  "value": "text-bison-001",
                  "from_entity": "entity_49211"
                }
              ]
            },
            "next_step": "step_981"
          },
          {
            "step": "step_981",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": "action_45716",
                "parameters": null,
                "result_variable": "step_981_result_1"
              }
            },
            "variable": "step_981",
            "condition": {
              "eq": [
                {
                  "variable": "step_646"
                },
                {
                  "value": "chat-bison-001",
                  "from_entity": "entity_49211"
                }
              ]
            },
            "next_step": "step_116"
          },
          {
            "step": "step_116",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": "action_23014",
                "parameters": null,
                "result_variable": "step_116_result_1"
              }
            },
            "variable": "step_116",
            "condition": {
              "eq": [
                {
                  "variable": "step_646"
                },
                {
                  "value": "embedding-gecko-001",
                  "from_entity": "entity_49211"
                }
              ]
            },
            "next_step": "step_782"
          },
          {
            "step": "step_782",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "skill_variable": "model_response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_782"
          }
        ],
        "title": "Test model",
        "action": "action_6799",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_6799_intent_8143"
        },
        "variables": [
          {
            "title": "No response",
            "variable": "step_110",
            "data_type": "any"
          },
          {
            "title": "What prompt do you want to use?",
            "variable": "step_115",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_116",
            "data_type": "any"
          },
          {
            "variable": "step_116_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_462",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_639",
            "data_type": "any"
          },
          {
            "title": "Which model do you want to use?",
            "variable": "step_646",
            "data_type": "any"
          },
          {
            "title": "Would you like to set a [temperature](https://developers.generat",
            "variable": "step_761",
            "data_type": "yes_no"
          },
          {
            "title": "{variable}",
            "variable": "step_782",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_981",
            "data_type": "any"
          },
          {
            "variable": "step_981_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_991",
            "data_type": "any"
          },
          {
            "variable": "step_991_result_1",
            "data_type": "any"
          },
          {
            "title": "Please enter a number between 0 to 1",
            "variable": "step_994",
            "data_type": "number"
          }
        ],
        "launch_mode": "learning",
        "next_action": "fallback",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. Please rephrase your question."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001",
            "condition": {
              "lte": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": ""
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "fallback",
                "parameters": null,
                "result_variable": "step_002_result_1"
              }
            },
            "variable": "step_002",
            "condition": {
              "gt": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            }
          }
        ],
        "title": "No action matches",
        "action": "anything_else",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "anything_else"
        },
        "variables": [
          {
            "title": "I am afraid I do not understand what you are asking, please re-p",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "variable": "step_002_result_1",
            "data_type": "any"
          }
        ],
        "disambiguation_opt_out": true
      },
      {
        "steps": [
          {
            "step": "digression_failure",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't confirm if you wanted to return to previous topic, let me connect to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "digression_failure",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Failed to confirm topic return"
                }
              ]
            },
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. I can connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_001",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Step validation failed"
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't assist you. I will connect you to an agent right away."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_002",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Agent requested"
                }
              ]
            },
            "next_step": "step_003"
          },
          {
            "step": "step_003",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I am afraid I do not understand what you are asking, let me connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_003",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "No action matches"
                }
              ]
            },
            "next_step": "step_004"
          },
          {
            "step": "step_004",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_004",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Danger word detected"
                }
              ]
            },
            "next_step": "step_005"
          },
          {
            "step": "step_005",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_005",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Profanity detected"
                }
              ]
            }
          }
        ],
        "title": "Fallback",
        "action": "fallback",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "fallback_connect_to_agent"
        },
        "variables": [
          {
            "title": "Topic return failed",
            "variable": "digression_failure",
            "data_type": "any"
          },
          {
            "title": "I'm afraid I don't understand. I can connect you to an agent.",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "title": "Sorry I couldn't assist you. I will connect you to an agent righ",
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "title": "I am afraid I do not understand what you are asking, let me conn",
            "variable": "step_003",
            "data_type": "any"
          },
          {
            "title": "It seems this conversation would be best managed",
            "variable": "step_004",
            "data_type": "any"
          },
          {
            "title": "Profanity - It seems this conversation",
            "variable": "step_005",
            "data_type": "any"
          }
        ],
        "next_action": "run_always",
        "disambiguation_opt_out": true
      },
      {
        "steps": [
          {
            "step": "danger_word_detected",
            "title": "Connect to agent",
            "handlers": [],
            "resolver": {
              "type": "fallback"
            },
            "variable": "danger_word_detected_variable",
            "condition": {
              "entity": "danger_words"
            },
            "next_step": "profanity_detected"
          },
          {
            "step": "profanity_detected",
            "title": "Show warning",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please use appropriate language when interacting with the assistant."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [
              {
                "type": "max_hits",
                "handler": "max_hits_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "max_hits": 2,
            "resolver": {
              "type": "end_action"
            },
            "variable": "profanity_detected_variable",
            "condition": {
              "entity": "profane_words"
            }
          }
        ],
        "title": "Trigger word detected",
        "action": "run_always",
        "boosts": [],
        "handlers": [],
        "variables": [
          {
            "title": "Profanity detected",
            "variable": "danger_word_detected_variable",
            "data_type": "any"
          },
          {
            "title": "Profane word detected",
            "variable": "profanity_detected_variable",
            "data_type": "any"
          }
        ],
        "next_action": "anything_else"
      },
      {
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Welcome, how can I assist you?"
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001"
          }
        ],
        "title": "Greet customer",
        "action": "welcome",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "welcome"
        },
        "variables": [
          {
            "variable": "step_001",
            "data_type": "any"
          }
        ],
        "next_action": "action_23014",
        "disambiguation_opt_out": true
      }
    ],
    "intents": [
      {
        "intent": "action_23014_intent_29148",
        "examples": [
          {
            "text": "Invoke PaLM Generate Embeddings API"
          }
        ]
      },
      {
        "intent": "action_38580_intent_18682",
        "examples": [
          {
            "text": "Invoke PaLM Generate Text API"
          }
        ]
      },
      {
        "intent": "action_45716_intent_34507",
        "examples": [
          {
            "text": "Invoke PaLM Generate message API"
          }
        ]
      },
      {
        "intent": "action_6799_intent_8143",
        "examples": [
          {
            "text": "Test model"
          }
        ]
      },
      {
        "intent": "fallback_connect_to_agent",
        "examples": [
          {
            "text": "Agent help"
          },
          {
            "text": "Call agent"
          },
          {
            "text": "Can I connect to an agent?"
          },
          {
            "text": "I would like to speak to a human"
          },
          {
            "text": "I would like to speak to someone"
          }
        ],
        "description": "Please transfer me to an agent"
      }
    ],
    "entities": [
      {
        "entity": "danger_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "entity_49211",
        "values": [
          {
            "type": "synonyms",
            "value": "chat-bison-001",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "embedding-gecko-001",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "text-bison-001",
            "synonyms": []
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "profane_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "sys-number",
        "values": []
      },
      {
        "entity": "sys-yes-no",
        "values": []
      }
    ],
    "metadata": {
      "api_version": {
        "major_version": "v2",
        "minor_version": "2018-11-08"
      }
    },
    "variables": [
      {
        "title": "model",
        "variable": "model",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "model_prompt",
        "variable": "model_prompt",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "model_response",
        "variable": "model_response",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "temperature",
        "variable": "temperature",
        "data_type": "number",
        "description": "",
        "initial_value": {
          "scalar": 0
        }
      }
    ],
    "data_types": [],
    "collections": [],
    "counterexamples": [],
    "system_settings": {
      "variable": {
        "format": {
          "time": {
            "pattern": "short"
          },
          "currency": {
            "fraction_digits": 2
          }
        }
      },
      "off_topic": {
        "enabled": true
      },
      "auto_learn": {
        "apply": true
      },
      "topic_switch": {
        "enabled": true,
        "messages": {
          "enable_confirmation": true,
          "confirmation_failure": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "I'm sorry, I did not catch that, please confirm."
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              }
            ]
          },
          "confirmation_request": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "Do you want to continue with the previous topic: "
                        },
                        {
                          "system_variable": "digressed_from"
                        },
                        {
                          "scalar": "?"
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              },
              {
                "options": [
                  {
                    "label": "Yes",
                    "value": {
                      "input": {
                        "text": "Yes"
                      }
                    }
                  },
                  {
                    "label": "No",
                    "value": {
                      "input": {
                        "text": "No"
                      }
                    }
                  }
                ],
                "response_type": "option",
                "repeat_on_reprompt": true
              }
            ]
          }
        },
        "max_tries": 3
      },
      "disambiguation": {
        "prompt": "Did you mean:",
        "enabled": true,
        "randomize": true,
        "max_suggestions": 5,
        "suggestion_text_policy": "title",
        "none_of_the_above_prompt": "None of the above",
        "use_connect_to_support_prompt": "Connect to support",
        "single_answer_clarification_prompt": "Something else"
      },
      "spelling_auto_correct": true
    },
    "learning_opt_out": false
  },
  "description": "created for assistant a63745c3-18f3-4e69-b405-c50cffc4c46c",
  "assistant_id": "4d592ec8-fa71-4f04-b8a5-417ed406f9bb",
  "workspace_id": "eaf2528d-8c8d-47b9-8f60-c9fd3c5cbd8d",
  "dialog_settings": {},
  "next_snapshot_version": "1"
}
